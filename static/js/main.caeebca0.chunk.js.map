{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractAddress","connectWalletAsync","window","ethereum","request","method","addresses","obj","address","status","target","rel","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","image","pinataResponse","tokenURI","eth","Contract","contractABI","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caeebca0.chunk.js","sourcesContent":["require('dotenv').config();\r\n\r\nconst axios = require('axios');\r\n\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nexport const pinJSONToIPFS = async (JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n              pinata_api_key: key,\r\n              pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n    });\r\n};","import { pinJSONToIPFS } from './pinata.js';\r\nimport { createAlchemyWeb3 } from \"@alch/alchemy-web3\";\r\n\r\nimport contractABI from '../contract-abi.json';\r\nrequire('dotenv').config();\r\n\r\nconst web3 = createAlchemyWeb3(`https://eth-rinkeby.alchemyapi.io/v2/${process.env.REACT_APP_ALCHEMY_KEY}`);\r\n\r\nconst contractAddress = \"0x913b3F9dFe114d5305940Fb3D3BE53A34657BaA5\";\r\n\r\n// TODO: мы не должны тут статусы возвращать\r\nexport const connectWalletAsync = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addresses = await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      const obj = {\r\n        address: addresses[0],\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n      };\r\n      return obj;\r\n    }\r\n    catch (e) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + e.message,\r\n      };\r\n    }\r\n  }\r\n  else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n}\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addresses = await window.ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (addresses.length > 0) {\r\n        return {\r\n          address: addresses[0],\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n        };\r\n      }\r\n      else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const mintNFT = async(url, name, description) => {\r\n  if (url.trim() === \"\" || (name.trim() === \"\" || description.trim() === \"\")) {\r\n    return {\r\n     success: false,\r\n     status: \"❗Please make sure all fields are completed before minting.\",\r\n    }\r\n  }\r\n\r\n  const pinataResponse = await pinJSONToIPFS({\r\n    name,\r\n    image: url,\r\n    description: description\r\n  });\r\n\r\n  if (!pinataResponse.success) {\r\n      return {\r\n        success: false,\r\n        status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  }\r\n  const tokenURI = pinataResponse.pinataUrl;\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up your Ethereum transaction\r\n const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract\r\n  };\r\n\r\n  //sign the transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum.request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n    });\r\n\r\n    return {\r\n      success: true,\r\n      status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n    }\r\n  }\r\n  catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n  }\r\n}","import { useEffect, useState } from \"react\";\r\nimport {\r\n  connectWalletAsync,\r\n  getCurrentWalletConnected,\r\n  mintNFT,\r\n} from \"./utils/interact.js\";\r\n\r\nconst Minter = () => {\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const {address, status} = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n\r\n      addWalletListener();\r\n    })();\r\n  }, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", accounts => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWalletAsync();\r\n\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Metalamp NFT Minter</h1>\r\n\r\n      <p>Simply add your asset's link, name, and description, then press \"Mint.\"</p>\r\n\r\n      <form>\r\n        <h2>🖼 Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}